@import url('https://fonts.googleapis.com/css?family=Luckiest+Guy')
*
  box-sizing border-box
  transition background .25s


$color = rebeccapurple
$delayInc = 0.15
$duration = 1
$rows = 6

:root
  --bg1 $color
  --bg2 lighten($color, 40%)
  --bg3 lighten($color, 60%)
  --bg4 lighten($color, 80%)
  --delay $delayInc
  --duration $duration
  --rows $rows

html
body
  height 100vh
  font-family 'Luckiest Guy', cursive
  overflow hidden
  position relative
  width 100vw

.loading-screen
  position fixed
  top 0
  right 0
  bottom 0
  left 0
  &__msg
    bottom 20px
    color #fafafa
    font-size 2.25rem
    position absolute
    right 20px
    transform translate3d(0, 0, 0)
    z-index 10

  &--loading .bg div
    &:nth-child(1)
      animation-name drift-right, drift-in
    &:nth-child(2)
      animation-name drift-left
    &:nth-child(3)
      animation-name drift-right

.bg
  height calc((100 / var(--rows)) * 1%)
  position relative
  width 100%

  div
    animation-duration calc(var(--duration) * 1s)
    animation-fill-mode forwards
    animation-timing-function ease
    height 100%
    left 0
    position absolute
    top 0
    transform translate3d(0, 0, 0)
    width 100%

    &:nth-child(1)
      background var(--bg1)
      z-index 5

    &:nth-child(2)
      background var(--bg2)
      z-index 4

    &:nth-child(3)
      background var(--bg3)
      z-index 3

    &:nth-child(4)
      background var(--bg4)
      z-index 2

input
  background var(--bg1)
  border 2px solid white
  bottom 20px
  cursor pointer
  height 44px
  left 20px
  position absolute
  width 44px


.bg
  for $bg in (1..$rows)
    &:nth-of-type({$bg}) div
      // At this point, need to consider when the last row would finish animating before the next set
      // For example, delay for round 2 is when the last in row one finishes
      DELAY_LAPSE_DIVIDER = 4
      ROUND = '((var(--delay) * %s) + (var(--duration) / %s))' % ($rows DELAY_LAPSE_DIVIDER)
      A = '(var(--delay) * %s)' % $bg
      B = '(%s + %s)' % (A ROUND)
      C = '(%s + %s)' % (B ROUND)
      D = '(%s + %s)' % (C ROUND)
      delayA = 'calc(%s * 1s)' % A
      delayB = 'calc(%s * 1s)' % B
      delayC = 'calc(%s * 1s)' % C
      delayD = 'calc(%s * 1s)' % D
      &:nth-child(1)
        animation-delay delayA, delayD
      &:nth-child(2)
        animation-delay delayB
      &:nth-child(3)
        animation-delay delayC

      // $round = (($delayInc * $rows) + ($duration / DELAY_LAPSE_DIVIDER))
      // $delayOne = ($delayInc * $bg)
      // $delayTwo = ($delayOne + $round)
      // $delayThree = ($delayTwo + $round)
      // $delayFour = ($delayThree + $round)
      // &:nth-child(1)
      //   animation-delay ($delayOne * 1s), ($delayFour * 1s)
      // &:nth-child(2)
      //   animation-delay ($delayTwo * 1s)
      // &:nth-child(3)
      //   animation-delay ($delayThree * 1s)


@keyframes drift-in
  from
    transform translate(100%, 0)
  to
    transform translate(0%, 0%)

@keyframes drift-right
  to
    transform translate(100%, 0)

@keyframes drift-left
  to
    transform translate(-100%, 0)