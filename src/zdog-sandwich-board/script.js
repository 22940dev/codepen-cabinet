const {
  Snap: {
    path: { toCubic },
  },
  Zdog: { Illustration, TAU, Shape, Box, Group },
} = window

const PATHS = {
  C:
    'm 81.597582,106.25462 q 0.360128,-0.2926 0.742764,-0.2926 0.360128,0 0.607716,0.24758 0.247588,0.24759 0.247588,0.63023 0,0.20257 -0.11254,0.49517 -0.382636,0.58521 -0.855304,1.14791 -0.45016,0.54019 -1.01286,0.96785 -0.5627,0.40514 -1.23794,0.65273 -0.652732,0.27009 -1.463021,0.27009 -1.215432,0 -2.228292,-0.49517 -0.990352,-0.49518 -1.733116,-1.35048 -0.720256,-0.85531 -1.1254,-2.00321 -0.382636,-1.17042 -0.382636,-2.49839 0,-0.94534 0.247588,-1.75563 0.33762,-1.08038 0.78778,-1.89067 0.45016,-0.810287 1.057876,-1.418003 0.630224,-0.630224 1.418004,-1.102892 0.810288,-0.495176 1.845656,-0.922828 0.675241,-0.292604 1.237941,-0.45016 0.585208,-0.157556 1.102892,-0.157556 0.78778,0 1.418004,0.45016 0.630224,0.45016 1.192924,1.530544 0.06752,0.202572 0.06752,0.405144 0,0.405144 -0.247588,0.652732 -0.247588,0.247588 -0.607716,0.247588 -0.427652,0 -0.78778,-0.360128 -0.315112,-0.607716 -0.5627,-0.855304 -0.247588,-0.247588 -0.5627,-0.247588 -0.247588,0 -0.585208,0.135048 -0.33762,0.11254 -0.855304,0.292604 -0.855305,0.33762 -1.643085,0.832796 -0.78778,0.472668 -1.395496,1.170413 -0.585208,0.67524 -0.945336,1.57556 -0.33762,0.90032 -0.33762,2.04823 0,0.81029 0.247588,1.59807 0.247588,0.76527 0.697748,1.3955 0.472668,0.60771 1.147908,0.99035 0.67524,0.36013 1.553052,0.36013 0.517685,0 0.967845,-0.20258 0.45016,-0.20257 0.832796,-0.54019 0.382636,-0.33762 0.697748,-0.74276 0.315112,-0.40515 0.5627,-0.81029 z',
  O:
    'm 95.648729,103.86877 q 0.06752,-0.45016 0.11254,-0.90032 0.06752,-0.47267 0.06752,-0.94533 0,-0.58521 -0.11254,-1.19293 -0.11254,-0.60771 -0.405144,-1.125399 -0.517684,-0.967844 -1.508036,-1.485528 -0.990352,-0.517684 -2.070736,-0.517684 -1.282956,0 -2.295816,0.742764 -0.630224,0.472668 -1.1254,1.147908 -0.472668,0.675239 -0.810288,1.440509 -0.315113,0.76528 -0.495177,1.57556 -0.157556,0.78778 -0.157556,1.50804 0,0.90032 0.22508,1.73312 0.247588,0.81028 0.742765,1.44051 0.517684,0.60771 1.282956,0.99035 0.765272,0.38264 1.80064,0.38264 0.427652,0 0.855304,-0.11254 0.45016,-0.11254 0.810288,-0.31512 0.652732,-0.36012 1.147908,-0.87781 0.517684,-0.51768 0.90032,-1.1254 0.382636,-0.60771 0.652732,-1.28295 0.270096,-0.69775 0.45016,-1.37299 z m 1.80064,0.22508 q -0.202572,0.78778 -0.585208,1.66559 -0.360128,0.87782 -0.877812,1.6656 -0.495176,0.78778 -1.170416,1.44051 -0.652732,0.65273 -1.440512,0.99035 -0.360128,0.13505 -0.630224,0.22508 -0.270096,0.11254 -0.540192,0.18006 -0.270096,0.0675 -0.585208,0.11254 -0.292604,0.0675 -0.67524,0.09 -0.04502,0 -0.11254,0 -0.06752,0.0225 -0.135048,0.0225 -0.585208,0 -1.192924,-0.20257 -0.607716,-0.18006 -1.147908,-0.36013 -0.922829,-0.33762 -1.553053,-0.96784 -0.630224,-0.63022 -1.035368,-1.418 -0.382636,-0.81029 -0.5627,-1.71061 -0.157556,-0.90032 -0.157556,-1.80064 0,-0.33762 0.02251,-0.65273 0.02251,-0.33762 0.06752,-0.65274 0.11254,-0.72025 0.382636,-1.55305 0.292604,-0.83279 0.720256,-1.620575 0.427652,-0.810288 0.967844,-1.485528 0.562701,-0.67524 1.192925,-1.080384 0.78778,-0.517684 1.6881,-0.765272 0.90032,-0.270096 1.823148,-0.270096 1.530544,0 2.881024,0.720256 1.35048,0.720256 2.13826,2.205784 0.382636,0.720256 0.540192,1.530545 0.157556,0.78778 0.157556,1.59807 0,0.51768 -0.04502,1.05787 -0.04502,0.51769 -0.135048,1.03537 z',
  M:
    'm 115.1753,109.24818 q -0.0225,0.51769 -0.31511,0.76528 -0.2701,0.27009 -0.60772,0.27009 -0.31511,0 -0.60771,-0.24759 -0.2701,-0.22508 -0.31512,-0.72025 -0.11254,-1.08039 -0.2926,-2.27331 -0.15756,-1.21543 -0.38264,-2.43086 -0.20257,-1.23794 -0.47266,-2.43087 -0.24759,-1.19292 -0.5402,-2.228291 -0.42765,1.035371 -0.8553,2.183281 -0.42765,1.1254 -0.87781,2.29581 -0.42765,1.14791 -0.85531,2.29582 -0.42765,1.14791 -0.87781,2.18327 -0.36013,0.42766 -0.78778,0.42766 -0.33762,0 -0.74276,-0.36013 l -4.45659,-8.7106 q -0.11254,1.08039 -0.22508,2.27331 -0.11254,1.19292 -0.22508,2.40836 -0.09,1.21543 -0.20257,2.40835 -0.11254,1.19293 -0.22508,2.27331 -0.15755,0.38264 -0.40514,0.5627 -0.24759,0.18006 -0.51769,0.18006 -0.31511,0 -0.585204,-0.24758 -0.270096,-0.24759 -0.315112,-0.72026 0.135048,-1.44051 0.270096,-2.97106 0.157556,-1.55305 0.2926,-3.1061 0.15756,-1.57556 0.29261,-3.12861 0.15755,-1.553055 0.2926,-2.993567 0.09,-0.405144 0.33762,-0.630224 0.2701,-0.22508 0.58521,-0.22508 0.49518,0 0.8328,0.495176 0.60771,1.102892 1.21543,2.318324 0.60771,1.192921 1.21543,2.430861 0.60772,1.21544 1.21543,2.43087 0.63023,1.19292 1.23794,2.29581 0.45016,-1.10289 0.90032,-2.29581 0.47267,-1.21543 0.92283,-2.43087 0.47267,-1.23794 0.92283,-2.453369 0.47267,-1.215432 0.94533,-2.318324 0.18007,-0.292604 0.40515,-0.427652 0.22508,-0.135048 0.47267,-0.135048 0.27009,0 0.51768,0.202572 0.2701,0.202572 0.38264,0.585208 0.40514,1.418004 0.76527,2.948548 0.38263,1.530545 0.69775,3.106105 0.33762,1.55305 0.5852,3.12861 0.24759,1.55305 0.38264,3.01607 z',
  E:
    'm 124.66137,107.58259 q 0.42765,-0.0225 0.69774,0.18007 0.29261,0.18006 0.36013,0.47266 0.09,0.2701 -0.045,0.58521 -0.11254,0.29261 -0.49518,0.51769 -0.81029,0.22508 -1.73312,0.36012 -0.92282,0.13505 -1.86816,0.18007 -0.94534,0.0225 -1.86816,-0.045 -0.92283,-0.0675 -1.75563,-0.27009 -0.36013,-0.18007 -0.51768,-0.42766 -0.15756,-0.27009 -0.13505,-0.51768 v -0.0225 -9.881011 q -0.2926,-0.09003 -0.45016,-0.315112 -0.15756,-0.22508 -0.15756,-0.495176 0,-0.270096 0.18007,-0.517684 0.18006,-0.270096 0.5627,-0.405144 0.87781,-0.270096 1.77813,-0.360128 0.92283,-0.11254 1.84566,-0.135048 0.92282,-0.04502 1.84565,-0.04502 0.92283,0 1.82315,-0.04502 0.49518,-0.02251 0.76527,0.22508 0.29261,0.247588 0.33762,0.5627 0.045,0.315112 -0.18006,0.630224 -0.20257,0.292604 -0.69775,0.405144 -1.35048,0.06752 -2.88102,0.04502 -1.50804,-0.02251 -2.92604,0.202572 v 3.961409 q 1.17041,0.045 2.34083,0 1.19292,-0.0675 2.38585,-0.18006 0.49517,-0.0225 0.76527,0.22508 0.2926,0.24758 0.33762,0.5627 0.045,0.31511 -0.18007,0.63022 -0.20257,0.2926 -0.69774,0.40514 -1.23794,0.11254 -2.49839,0.18007 -1.23794,0.0675 -2.45337,0.0225 v 3.64629 q 1.35048,0.20257 2.79099,0.11254 1.46302,-0.11254 2.72347,-0.45016 z',
  S:
    'm 128.37343,108.21282 q -0.13505,-0.31512 -0.13505,-0.58521 0,-0.38264 0.22508,-0.60772 0.24759,-0.24759 0.60772,-0.24759 0.36013,0 0.69775,0.24759 0.38263,0.45016 0.87781,0.76527 0.51768,0.29261 1.08038,0.47267 0.58521,0.15756 1.17042,0.22508 0.60772,0.0675 1.17042,0.0675 0.38263,-0.13505 0.51768,-0.15756 0.15756,-0.045 0.24759,-0.09 0.09,-0.045 0.20257,-0.13505 0.11254,-0.09 0.42765,-0.31511 0.11254,-0.15756 0.20257,-0.29261 0.09,-0.13504 0.20258,-0.2926 l 0.20257,-0.60772 q 0,-0.15755 0,-0.2926 0,-0.15756 -0.0225,-0.33762 -0.045,-0.15756 -0.11254,-0.2926 -0.0675,-0.15756 -0.13505,-0.31512 -0.13505,-0.15755 -0.27009,-0.2926 -0.11254,-0.13505 -0.24759,-0.2926 -0.20257,-0.11254 -0.40515,-0.24759 -0.20257,-0.13505 -0.45016,-0.20257 -0.92282,-0.31512 -1.7106,-0.42766 -0.76528,-0.13504 -1.46302,-0.31511 -0.67524,-0.20257 -1.28296,-0.60771 -0.60772,-0.40515 -1.19292,-1.30547 -0.11254,-0.18006 -0.13505,-0.27009 -0.0225,-0.09 -0.045,-0.31512 -0.0225,-0.18006 -0.045,-0.33762 0,-0.18006 0,-0.33762 0,-0.40514 0.0675,-0.720253 0.09,-0.315112 0.24759,-0.607716 0.15755,-0.292604 0.40514,-0.585208 0.24759,-0.315112 0.58521,-0.67524 0.38264,-0.405144 0.87781,-0.652732 0.49518,-0.270096 1.03537,-0.405144 0.54019,-0.157556 1.10289,-0.202572 0.58521,-0.06752 1.1254,-0.06752 0.18007,0 0.31511,0 0.15756,0 0.31512,0.02251 0.51768,0.04502 0.96784,0.247588 0.47267,0.202572 0.96784,0.33762 0.51769,0.360128 0.51769,0.877812 0,0.33762 -0.2701,0.607716 -0.24759,0.247588 -0.72025,0.247588 -0.045,0 -0.11254,0 -0.045,-0.02251 -0.09,-0.02251 -0.72025,-0.22508 -1.28295,-0.33762 -0.54019,-0.135048 -1.05788,-0.135048 -0.54019,0 -1.10289,0.180064 -0.5627,0.180064 -1.30546,0.607716 -0.13505,0.180064 -0.2701,0.33762 -0.13505,0.135048 -0.2701,0.292604 -0.0675,0.135048 -0.13504,0.270099 -0.045,0.13505 -0.09,0.27009 0,0.13505 0,0.2701 0.0225,0.13505 0.045,0.24759 0.09,0.11254 0.15756,0.22508 0.0675,0.11254 0.15755,0.22508 l 0.94534,0.54019 q 0.67524,0.15756 1.26045,0.2701 0.5852,0.11254 1.1254,0.27009 0.54019,0.13505 1.05787,0.33762 0.54019,0.20257 1.14791,0.54019 0.31511,0.18007 0.54019,0.47267 0.22508,0.2701 0.42765,0.51769 0.36013,0.42765 0.51769,0.96784 0.18006,0.54019 0.18006,1.1254 0,0.81029 -0.31511,1.57556 -0.31511,0.76527 -0.90032,1.26045 -0.20257,0.18006 -0.42765,0.33762 -0.20257,0.13505 -0.40515,0.27009 -0.47266,0.31512 -1.05787,0.47267 -0.58521,0.15756 -1.23794,0.15756 -0.74277,0 -1.50804,-0.18007 -0.74276,-0.15755 -1.44051,-0.45016 -0.69775,-0.31511 -1.28296,-0.72025 -0.5852,-0.40515 -0.99035,-0.87781 z',
  D:
    'm 141.7441,110.35108 q -0.33762,-0.045 -0.5627,-0.20258 -0.22508,-0.13504 -0.33762,-0.33762 l -0.0675,-0.13504 q -0.045,-0.11254 -0.09,-0.22508 -0.045,-0.13505 -0.045,-0.24759 V 99.097075 q -0.20257,0.06752 -0.33762,0.135048 -0.11254,0.04502 -0.33762,0.04502 -0.42765,0 -0.69775,-0.247588 -0.24759,-0.247588 -0.24759,-0.585208 0,-0.495176 0.5627,-0.855304 0.58521,-0.360128 1.37299,-0.585208 0.78778,-0.247588 1.64309,-0.360128 0.87781,-0.11254 1.44051,-0.11254 1.64308,0 2.92604,0.540192 1.28295,0.540192 2.16077,1.46302 0.87781,0.90032 1.32797,2.115755 0.47267,1.21543 0.47267,2.5434 0,1.35048 -0.49518,2.65595 -0.49518,1.28295 -1.50804,2.2508 -0.69774,0.67524 -1.57556,1.08038 -0.8553,0.38264 -1.80064,0.63022 -0.94533,0.22508 -1.91318,0.33762 -0.96784,0.11254 -1.89067,0.20258 z m 2.27331,-11.974261 q -0.38264,0 -0.76527,0.04502 -0.38264,0.04502 -0.76527,0.11254 v 9.903525 q 0.65273,-0.0675 1.37298,-0.15756 0.74277,-0.09 1.44052,-0.2701 0.69774,-0.18006 1.30546,-0.47266 0.60772,-0.29261 1.01286,-0.74277 0.72026,-0.78778 1.08038,-1.77813 0.38264,-0.99035 0.38264,-2.02572 0,-0.90032 -0.33762,-1.73312 -0.31511,-0.83279 -0.96784,-1.463017 -0.63023,-0.652732 -1.57556,-1.035368 -0.94534,-0.382636 -2.18328,-0.382636 z',
  Z:
    'm 153.61101,109.99095 q -0.51768,0 -0.74276,-0.45016 -0.13505,-0.20257 -0.13505,-0.45016 0,-0.24759 0.13505,-0.45016 0.0225,-0.045 0.0225,-0.09 0.0225,-0.045 0.0675,-0.09 1.53054,-2.56591 3.55627,-4.92925 2.04822,-2.36334 4.11896,-4.524107 -1.26045,0.02251 -2.49839,0.04502 -1.21543,0.02251 -2.47588,0.02251 -0.47267,0 -0.96784,0 -0.47267,0 -0.94534,-0.02251 -0.49518,-0.06752 -0.74276,-0.33762 -0.22508,-0.270096 -0.22508,-0.585208 0,-0.33762 0.24758,-0.607716 0.2701,-0.292604 0.78778,-0.315112 0.65274,0.04502 1.28296,0.04502 0.63022,0 1.26045,0 1.71061,0 3.42122,-0.04502 1.7106,-0.04502 3.3987,-0.04502 0.78778,0.247588 0.78778,0.90032 0,0.180064 -0.0675,0.360128 -0.0675,0.180064 -0.22508,0.360128 -1.77813,1.395497 -3.26366,3.106107 -1.48553,1.6881 -2.90353,3.44372 -0.51769,0.65273 -1.03537,1.30547 -0.51769,0.65273 -0.99035,1.32797 h 0.49517 q 1.08039,0 2.16077,0.0675 1.10289,0.0675 2.20579,0.0675 0.78778,0 1.55305,-0.0675 0.78778,-0.0675 1.57556,-0.27009 h 0.0675 q 0.49518,0 0.76527,0.27009 0.2701,0.24759 0.2701,0.60772 0,0.24759 -0.13505,0.47267 -0.13505,0.22508 -0.45016,0.40514 -0.51768,0.13505 -1.01286,0.24759 -0.49517,0.11254 -1.01286,0.15755 -0.31511,0.045 -0.63022,0.045 -0.31511,0 -0.63023,0 -1.1479,0 -2.31832,-0.09 -1.14791,-0.09 -2.29582,-0.09 -0.58521,0 -1.19292,0.045 -0.60772,0.045 -1.19293,0.15756 z',
  LOGO:
    'M502.285 159.704l-234-156c-7.987-4.915-16.511-4.96-24.571 0l-234 156C3.714 163.703 0 170.847 0 177.989v155.999c0 7.143 3.714 14.286 9.715 18.286l234 156.022c7.987 4.915 16.511 4.96 24.571 0l234-156.022c6-3.999 9.715-11.143 9.715-18.286V177.989c-.001-7.142-3.715-14.286-9.716-18.285zM278 63.131l172.286 114.858-76.857 51.429L278 165.703V63.131zm-44 0v102.572l-95.429 63.715-76.857-51.429L234 63.131zM44 219.132l55.143 36.857L44 292.846v-73.714zm190 229.715L61.714 333.989l76.857-51.429L234 346.275v102.572zm22-140.858l-77.715-52 77.715-52 77.715 52-77.715 52zm22 140.858V346.275l95.429-63.715 76.857 51.429L278 448.847zm190-156.001l-55.143-36.857L468 219.132v73.714z',
}

const BOARD_COLOR = '#26232b'
const CHALK_ONE = '#f4f4f0'
const CHALK_TWO = '#f2a3bd'
const CHALK_THREE = '#d6d963'
const CHALK_FOUR = '#6fe7db'
const CHALK_FIVE = '#c4adc9'
const CHALK_COLORS = [CHALK_ONE, CHALK_TWO, CHALK_THREE, CHALK_FOUR, CHALK_FIVE]
const CHALK = CHALK_COLORS[Math.floor(Math.random() * CHALK_COLORS.length)]

const FRAME = '#deb887'
const BOARD_WIDTH = 150
const BOARD_HEIGHT = 250
const BOARD_STROKE = 10
/**
 * Some magic from Chris Gannon!
 * https://codepen.io/chrisgannon/pen/OYadbL
 * Thanks! 👍
 */ function makeZdogBezier(_path) {
  let arr = []
  arr[0] = { x: _path[0].x, y: _path[0].y }
  for (let i = 1; i < _path.length; i++) {
    if (i % 3 == 0) {
      var key = 'bezier'
      var obj = {}
      obj[key] = [
        { x: _path[i - 2].x, y: _path[i - 2].y },
        { x: _path[i - 1].x, y: _path[i - 1].y },
        { x: _path[i].x, y: _path[i].y },
      ]
      arr.push(obj)
    }
  }
  return arr
}
/**
 * Function to normalize the path Array
 * and reduce any offset that may be in place
 * Not perfect but does make the path text a little easier to work with
 */
const normalize = arr => {
  const { x: offsetX, y: offsetY } = arr[0]
  return arr.map(e => ({ x: e.x - offsetX, y: e.y - offsetY }))
}
/**
 * Generates the path array from a path string
 */
const getPath = pathString => {
  const result = toCubic(pathString).reduce((a, c) => {
    c.map((e, i) => {
      if (i % 2 === 1) {
        const [x, y] = c.slice(i, i + 2)
        a.push({ x, y })
      }
    })
    return a
  }, [])
  return normalize(result)
}
const Scene = new Illustration({
  element: 'canvas',
  resize: 'fullscreen',
  dragRotate: true,
  rotate: {
    x: TAU * -0.075,
    y: TAU * 0.1,
  },
})
const depth = 20
const BoardFace = new Group({
  addTo: Scene,
  translate: {
    z: depth,
  },
  rotate: {
    x: TAU * 0.025,
  },
})
new Shape({
  addTo: BoardFace,
  path: [
    {
      x: -(BOARD_WIDTH / 2),
      y: -(BOARD_HEIGHT / 2),
    },
    {
      x: -(BOARD_WIDTH / 2),
      y: BOARD_HEIGHT / 2,
    },
    {
      x: -(BOARD_WIDTH / 2),
      y: BOARD_HEIGHT / 2 - BOARD_HEIGHT / 10,
    },
    {
      x: BOARD_WIDTH / 2,
      y: BOARD_HEIGHT / 2 - BOARD_HEIGHT / 10,
    },
    {
      x: BOARD_WIDTH / 2,
      y: BOARD_HEIGHT / 2,
    },
    {
      x: BOARD_WIDTH / 2,
      y: -(BOARD_HEIGHT / 2),
    },
  ],
  stroke: BOARD_STROKE,
  color: FRAME,
})
new Box({
  depth: BOARD_STROKE * 0.5,
  addTo: BoardFace,
  color: BOARD_COLOR,
  width: BOARD_WIDTH - BOARD_STROKE,
  height: BOARD_HEIGHT - BOARD_STROKE * 3.5,
  translate: {
    y: -(BOARD_STROKE * 1.25),
  },
})
const come = new Group({
  addTo: BoardFace,
  scale: 1.75,
  translate: {
    x: -40,
    y: -80,
  },
}) // C
const letter = new Shape({
  path: makeZdogBezier(getPath(PATHS.C)),
  color: CHALK,
  fill: CHALK,
  addTo: come,
  backface: BOARD_COLOR,
}) // O
const o = letter.copy({
  path: makeZdogBezier(getPath(PATHS.O)),
  translate: {
    x: 15,
    y: -1,
  },
}) // M
letter.copy({
  path: makeZdogBezier(getPath(PATHS.M)),
  translate: {
    x: 35,
    y: 4,
  },
}) // E
const e = letter.copy({
  path: makeZdogBezier(getPath(PATHS.E)),
  translate: {
    x: 45,
    y: 3,
  },
})
const see = new Group({
  addTo: BoardFace,
  scale: 1.75,
  translate: {
    x: -35,
    y: -30,
  },
})
letter.copy({
  addTo: see,
  path: makeZdogBezier(getPath(PATHS.S)),
})
e.copy({
  addTo: see,
  translate: {
    x: 20,
  },
})
e.copy({
  addTo: see,
  translate: {
    x: 32,
  },
})
const codez = new Group({
  addTo: BoardFace,
  scale: 2,
  translate: {
    x: -45,
    y: 15,
  },
})
letter.copy({
  addTo: codez,
})
o.copy({
  addTo: codez,
  translate: {
    x: 15,
    y: -2,
  },
})
letter.copy({
  addTo: codez,
  path: makeZdogBezier(getPath(PATHS.D)),
  translate: {
    x: 21,
    y: 4,
  },
})
e.copy({
  addTo: codez,
  translate: {
    x: 40,
    y: 1,
  },
})
letter.copy({
  addTo: codez,
  path: makeZdogBezier(getPath(PATHS.Z)),
  translate: {
    x: 44,
    y: 3,
  },
})
new Shape({
  addTo: BoardFace,
  scale: 0.105,
  translate: {
    x: 25,
    y: 50,
  },
  path: makeZdogBezier(getPath(PATHS.LOGO)),
  color: CHALK,
  backface: BOARD_COLOR,
  closed: false,
})
BoardFace.copyGraph({
  translate: {
    z: -depth,
  },
  rotate: {
    x: TAU * -0.025,
    y: TAU * 0.5,
  },
})
const start = () => {
  changeColors(Scene)
  Scene.rotate.y += 0.01
  Scene.updateRenderGraph()
  requestAnimationFrame(start)
}
const changeColors = item => {
  // Search the Scene for any item that has a color of chalk
  if (item.color && CHALK_COLORS.includes(item.color)) {
    item.color = CHALK_COLORS[Math.floor(Math.random() * CHALK_COLORS.length)]
  }
  if (item.children) {
    for (const child of item.children) {
      changeColors(child)
    }
  }
} // window.addEventListener('click', () => { //   changeColors(Scene) // })
start()
